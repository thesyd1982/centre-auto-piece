/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package facturation;

import facturation.entities.Client;
import facturation.entities.Facture;
import facturation.entities.FactureProfessionnel;
import facturation.entities.Ligne;
import facturation.entities.Piece;
import facturation.entities.Professionnel;
import facturation.service.FacturationService;
import facturation.service.FactureFileService;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author tayeb
 */
public class FacturerProfessionnel extends javax.swing.JFrame implements Sujet {

    protected TableRowSorter<TableModel> sorterClientFacture;
    protected LigneTableModel modelLigne;

    protected PieceTableModel modelPiece;
    protected ArrayList<Observateur> observateurs;
    protected FacturationService fs;

    protected int lignesIndex = 0;
    protected Facture selectedFacture;
    protected FactureFileService ffs;

    protected Professionnel selectedProfessionnel;
    protected List<Ligne> lignes = new ArrayList<>();
    protected FactureProfessionnel facture;
    protected Client c;
    protected TableRowSorter sorterStock;

    public FacturerProfessionnel(FacturationService fs, FactureFileService ffs) {

        modelPiece = new PieceTableModel();

        modelLigne = new LigneTableModel(lignes);
        facture = new FactureProfessionnel();

        Date d = new Date();
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy");
        facture.setDate_facturation(dateFormatter.format(d));
        facture.setMode_payement("Espèces");
        facture.setDate_livraison(dateFormatter.format(d));
        initComponents();
        modelPiece.setPieces(pieceList);

        this.fs = fs;
        this.ffs = ffs;

        this.stockJTable.setModel(modelPiece);

        this.sorterStock = new TableRowSorter<>(this.stockJTable.getModel());
        this.stockJTable.setRowSorter(sorterStock);

        this.sorterClientFacture = new TableRowSorter<>(this.professionnelFactureJTable.getModel());
        this.professionnelFactureJTable.setRowSorter(sorterClientFacture);

        observateurs = new ArrayList<>();

        observateurs = new ArrayList<>();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("centre_auto_piece_PUN").createEntityManager();
        pieceQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Piece p WHERE p.quantite > 0");
        pieceList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(pieceQuery.getResultList());
        professionnelQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Professionnel p");
        professionnelList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(professionnelQuery.getResultList());
        modePayementBG = new javax.swing.ButtonGroup();
        facturerPorfessionnelJP = new javax.swing.JPanel();
        conteneurProfessionnelJP = new javax.swing.JPanel();
        selecteurProfessionnelJP = new javax.swing.JPanel();
        selectProfessionnelFactureCardJP = new javax.swing.JPanel();
        nomSocieteFactureJTF = new javax.swing.JTextField();
        nomSocieteFactureJL = new javax.swing.JLabel();
        professionnelFactureJSP = new javax.swing.JScrollPane();
        professionnelFactureJTable = new javax.swing.JTable();
        modificationProfessionnelFactureCardJP = new javax.swing.JPanel();
        nomSocieteJL = new javax.swing.JLabel();
        lieuJL = new javax.swing.JLabel();
        cpJL = new javax.swing.JLabel();
        villeJL = new javax.swing.JLabel();
        selectionnerProfessionnelJB = new javax.swing.JButton();
        nomSocieteTitreJL = new javax.swing.JLabel();
        lieuTitreJL = new javax.swing.JLabel();
        cpTitreJL = new javax.swing.JLabel();
        villeTiteJL = new javax.swing.JLabel();
        dateLivraisonJDateChooser = new com.toedter.calendar.JDateChooser();
        factureMPJPanel = new javax.swing.JPanel();
        factureMPEspeceJRB = new javax.swing.JRadioButton();
        factureMPChequeJRB = new javax.swing.JRadioButton();
        factureMPVirementJRB = new javax.swing.JRadioButton();
        selecteurPieceJP = new javax.swing.JPanel();
        stockJSP = new javax.swing.JScrollPane();
        stockJTable = new javax.swing.JTable();
        addPieceFactureJB = new javax.swing.JButton();
        removePieceFactureJB = new javax.swing.JButton();
        filtrePieceJTF = new javax.swing.JTextField();
        lignesFactureJSP = new javax.swing.JScrollPane();
        lignesFactureJTable = new javax.swing.JTable();
        recherchePiceJL = new javax.swing.JLabel();
        sauvegardeFactureJB = new javax.swing.JButton();
        impressionFactureJB = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        immatriculationJtf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Facturer un professionnel");
        setSize(new java.awt.Dimension(900, 720));

        facturerPorfessionnelJP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        facturerPorfessionnelJP.setMaximumSize(new java.awt.Dimension(900, 720));
        facturerPorfessionnelJP.setPreferredSize(new java.awt.Dimension(900, 720));

        selecteurProfessionnelJP.setLayout(new java.awt.CardLayout());

        selectProfessionnelFactureCardJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Choisir un professionnel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        nomSocieteFactureJTF.setColumns(40);
        nomSocieteFactureJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomSocieteFactureJTFActionPerformed(evt);
            }
        });

        nomSocieteFactureJL.setText("Filtrer par nom de la société");

        professionnelFactureJTable.setRowSorter(sorterClientFacture);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelList, professionnelFactureJTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("N° Professionel");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomSociete}"));
        columnBinding.setColumnName("Socièté");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.lieu}"));
        columnBinding.setColumnName("Lieu");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.ville}"));
        columnBinding.setColumnName("Ville");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.cp}"));
        columnBinding.setColumnName("Code Postal");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        professionnelFactureJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                professionnelFactureJTableMouseClicked(evt);
            }
        });
        professionnelFactureJSP.setViewportView(professionnelFactureJTable);

        javax.swing.GroupLayout selectProfessionnelFactureCardJPLayout = new javax.swing.GroupLayout(selectProfessionnelFactureCardJP);
        selectProfessionnelFactureCardJP.setLayout(selectProfessionnelFactureCardJPLayout);
        selectProfessionnelFactureCardJPLayout.setHorizontalGroup(
            selectProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(professionnelFactureJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
                    .addGroup(selectProfessionnelFactureCardJPLayout.createSequentialGroup()
                        .addComponent(nomSocieteFactureJL)
                        .addGap(18, 18, 18)
                        .addComponent(nomSocieteFactureJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        selectProfessionnelFactureCardJPLayout.setVerticalGroup(
            selectProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(selectProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomSocieteFactureJL)
                    .addComponent(nomSocieteFactureJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(professionnelFactureJSP, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        selecteurProfessionnelJP.add(selectProfessionnelFactureCardJP, "selectProfessionnelCard");

        modificationProfessionnelFactureCardJP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        modificationProfessionnelFactureCardJP.setPreferredSize(new java.awt.Dimension(745, 136));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelFactureJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomSociete}"), nomSocieteJL, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelFactureJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.lieu}"), lieuJL, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelFactureJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.cp}"), cpJL, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelFactureJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.ville}"), villeJL, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        selectionnerProfessionnelJB.setText("retour au choix du client");
        selectionnerProfessionnelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionnerProfessionnelJBActionPerformed(evt);
            }
        });

        nomSocieteTitreJL.setText("Société");

        lieuTitreJL.setText("Lieu");

        cpTitreJL.setText("Code Postal");

        villeTiteJL.setText("Ville");

        javax.swing.GroupLayout modificationProfessionnelFactureCardJPLayout = new javax.swing.GroupLayout(modificationProfessionnelFactureCardJP);
        modificationProfessionnelFactureCardJP.setLayout(modificationProfessionnelFactureCardJPLayout);
        modificationProfessionnelFactureCardJPLayout.setHorizontalGroup(
            modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(villeTiteJL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(villeJL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectionnerProfessionnelJB, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addGroup(modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cpTitreJL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpJL))
                    .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(nomSocieteTitreJL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomSocieteJL, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lieuTitreJL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lieuJL)))
                .addGap(274, 571, Short.MAX_VALUE))
        );

        modificationProfessionnelFactureCardJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cpJL, lieuJL, nomSocieteJL, villeJL});

        modificationProfessionnelFactureCardJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cpTitreJL, lieuTitreJL, nomSocieteTitreJL, villeTiteJL});

        modificationProfessionnelFactureCardJPLayout.setVerticalGroup(
            modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomSocieteTitreJL)
                    .addComponent(nomSocieteJL, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                        .addGroup(modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lieuJL, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lieuTitreJL, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(12, 12, 12)
                        .addComponent(cpJL))
                    .addComponent(cpTitreJL, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(12, 12, 12)
                .addGroup(modificationProfessionnelFactureCardJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(villeJL)
                    .addComponent(villeTiteJL))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificationProfessionnelFactureCardJPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectionnerProfessionnelJB)
                .addContainerGap())
        );

        modificationProfessionnelFactureCardJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cpJL, cpTitreJL, lieuJL, lieuTitreJL, nomSocieteJL, nomSocieteTitreJL, villeJL, villeTiteJL});

        selecteurProfessionnelJP.add(modificationProfessionnelFactureCardJP, "modificationProfessionnelJPCard");

        javax.swing.GroupLayout conteneurProfessionnelJPLayout = new javax.swing.GroupLayout(conteneurProfessionnelJP);
        conteneurProfessionnelJP.setLayout(conteneurProfessionnelJPLayout);
        conteneurProfessionnelJPLayout.setHorizontalGroup(
            conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurProfessionnelJPLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(selecteurProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE))
        );
        conteneurProfessionnelJPLayout.setVerticalGroup(
            conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurProfessionnelJPLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(selecteurProfessionnelJP, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dateLivraisonJDateChooser.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Date de livraison", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 3, 12))); // NOI18N
        dateLivraisonJDateChooser.setDate(new Date());
        dateLivraisonJDateChooser.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        dateLivraisonJDateChooser.setDoubleBuffered(false);
        dateLivraisonJDateChooser.setFocusable(false);
        dateLivraisonJDateChooser.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dateLivraisonJDateChooser.setPreferredSize(null);
        dateLivraisonJDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateLivraisonJDateChooserPropertyChange(evt);
            }
        });

        factureMPJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mode de  règlement ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 3, 12))); // NOI18N

        modePayementBG.add(factureMPEspeceJRB);
        factureMPEspeceJRB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        factureMPEspeceJRB.setSelected(true);
        factureMPEspeceJRB.setText("Espèces");
        factureMPEspeceJRB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        factureMPEspeceJRB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        factureMPEspeceJRB.setPreferredSize(new java.awt.Dimension(74, 24));
        factureMPEspeceJRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factureMPEspeceJRBActionPerformed(evt);
            }
        });

        modePayementBG.add(factureMPChequeJRB);
        factureMPChequeJRB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        factureMPChequeJRB.setText("Chéque");
        factureMPChequeJRB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        factureMPChequeJRB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        factureMPChequeJRB.setPreferredSize(new java.awt.Dimension(74, 24));
        factureMPChequeJRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factureMPChequeJRBActionPerformed(evt);
            }
        });

        modePayementBG.add(factureMPVirementJRB);
        factureMPVirementJRB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        factureMPVirementJRB.setText("Virement bancaire");
        factureMPVirementJRB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        factureMPVirementJRB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        factureMPVirementJRB.setPreferredSize(new java.awt.Dimension(74, 24));
        factureMPVirementJRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factureMPVirementJRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout factureMPJPanelLayout = new javax.swing.GroupLayout(factureMPJPanel);
        factureMPJPanel.setLayout(factureMPJPanelLayout);
        factureMPJPanelLayout.setHorizontalGroup(
            factureMPJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factureMPJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(factureMPJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(factureMPEspeceJRB, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(factureMPVirementJRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(factureMPChequeJRB, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        factureMPJPanelLayout.setVerticalGroup(
            factureMPJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factureMPJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(factureMPEspeceJRB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(factureMPChequeJRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(factureMPVirementJRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selecteurPieceJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Selcetion des pièces a facturées", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        stockJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Piéces en stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        stockJTable.setModel(modelPiece);
        stockJTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        stockJSP.setViewportView(stockJTable);

        addPieceFactureJB.setText(">>");
        addPieceFactureJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPieceFactureJBActionPerformed(evt);
            }
        });

        removePieceFactureJB.setText("<<");
        removePieceFactureJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePieceFactureJBActionPerformed(evt);
            }
        });

        filtrePieceJTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtrePieceJTFKeyReleased(evt);
            }
        });

        lignesFactureJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Lignes de la facture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lignesFactureJTable.setModel(modelLigne);
        lignesFactureJTable.setFocusTraversalPolicy(lignesFactureJTable.getFocusTraversalPolicy());
        lignesFactureJTable.setRowHeight(19);
        lignesFactureJTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        lignesFactureJSP.setViewportView(lignesFactureJTable);

        recherchePiceJL.setText("Recherche");

        javax.swing.GroupLayout selecteurPieceJPLayout = new javax.swing.GroupLayout(selecteurPieceJP);
        selecteurPieceJP.setLayout(selecteurPieceJPLayout);
        selecteurPieceJPLayout.setHorizontalGroup(
            selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selecteurPieceJPLayout.createSequentialGroup()
                .addGroup(selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(selecteurPieceJPLayout.createSequentialGroup()
                        .addComponent(recherchePiceJL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtrePieceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))
                    .addComponent(stockJSP, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPieceFactureJB, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removePieceFactureJB, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lignesFactureJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addGap(106, 106, 106))
        );
        selecteurPieceJPLayout.setVerticalGroup(
            selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selecteurPieceJPLayout.createSequentialGroup()
                .addGroup(selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selecteurPieceJPLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lignesFactureJSP))
                    .addGroup(selecteurPieceJPLayout.createSequentialGroup()
                        .addGroup(selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(selecteurPieceJPLayout.createSequentialGroup()
                                .addGroup(selecteurPieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(filtrePieceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(recherchePiceJL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stockJSP, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(selecteurPieceJPLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(addPieceFactureJB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removePieceFactureJB)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );

        sauvegardeFactureJB.setText("Enregistrer");
        sauvegardeFactureJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegardeFactureJBActionPerformed(evt);
            }
        });

        impressionFactureJB.setText("impression");
        impressionFactureJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impressionFactureJBActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Immatriculation"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(immatriculationJtf, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(immatriculationJtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout facturerPorfessionnelJPLayout = new javax.swing.GroupLayout(facturerPorfessionnelJP);
        facturerPorfessionnelJP.setLayout(facturerPorfessionnelJPLayout);
        facturerPorfessionnelJPLayout.setHorizontalGroup(
            facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, facturerPorfessionnelJPLayout.createSequentialGroup()
                .addGroup(facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(impressionFactureJB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sauvegardeFactureJB))
                    .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selecteurPieceJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                                .addComponent(conteneurProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(factureMPJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateLivraisonJDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(2, 2, 2))
        );

        facturerPorfessionnelJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateLivraisonJDateChooser, factureMPJPanel});

        facturerPorfessionnelJPLayout.setVerticalGroup(
            facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                .addGroup(facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(conteneurProfessionnelJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(facturerPorfessionnelJPLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(dateLivraisonJDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(factureMPJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(selecteurPieceJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(facturerPorfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sauvegardeFactureJB)
                    .addComponent(impressionFactureJB))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(facturerPorfessionnelJP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1189, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(facturerPorfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPieceFactureJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPieceFactureJBActionPerformed
        this.selectPiece();
    }//GEN-LAST:event_addPieceFactureJBActionPerformed

    private void removePieceFactureJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePieceFactureJBActionPerformed
        this.unSelectPiece();
        //this.modelLigne.getLignes().clear();
    }//GEN-LAST:event_removePieceFactureJBActionPerformed

    private void selectionnerProfessionnelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionnerProfessionnelJBActionPerformed
        changeCard(this.selecteurProfessionnelJP, "selectProfessionnelCard");
        facture.setClient(null);

    }//GEN-LAST:event_selectionnerProfessionnelJBActionPerformed

    private void professionnelFactureJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_professionnelFactureJTableMouseClicked
        changeCard(this.selecteurProfessionnelJP, "modificationProfessionnelJPCard");
        int selectedRow = professionnelFactureJTable.getSelectedRow();
        TableModel model = professionnelFactureJTable.getModel();
        Professionnel pro = new Professionnel();
        pro.setId((Long) model.getValueAt(selectedRow, 0));

        pro.setNomSociete((String) model.getValueAt(selectedRow, 1));
        pro.setLieu((String) model.getValueAt(selectedRow, 2));
        pro.setVille((String) model.getValueAt(selectedRow, 3));
        pro.setCodePostal((String) model.getValueAt(selectedRow, 4));

        facture.setClient(pro);


    }//GEN-LAST:event_professionnelFactureJTableMouseClicked

    private void nomSocieteFactureJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomSocieteFactureJTFActionPerformed

        int column = 2;

        String nomSociete = this.nomSocieteFactureJTF.getText().toUpperCase(Locale.FRANCE);

        RowFilter rowFilter = RowFilter.regexFilter(
                Pattern.compile(nomSociete,
                        Pattern.CASE_INSENSITIVE).toString(), column);
        sorterClientFacture.setRowFilter(rowFilter);
    }//GEN-LAST:event_nomSocieteFactureJTFActionPerformed

    private void dateLivraisonJDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateLivraisonJDateChooserPropertyChange

        Date d = this.dateLivraisonJDateChooser.getDate();
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy");
        /* verification que la date de livraison est plus jeune que la date de facturation */
        facture.setDate_livraison(dateFormatter.format(d));


    }//GEN-LAST:event_dateLivraisonJDateChooserPropertyChange

    private void factureMPEspeceJRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factureMPEspeceJRBActionPerformed
        facture.setMode_payement("Espèces");

    }//GEN-LAST:event_factureMPEspeceJRBActionPerformed

    private void factureMPVirementJRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factureMPVirementJRBActionPerformed
        facture.setMode_payement("Carte bleu");
    }//GEN-LAST:event_factureMPVirementJRBActionPerformed

    private void factureMPChequeJRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factureMPChequeJRBActionPerformed
        facture.setMode_payement("Chéque");

    }//GEN-LAST:event_factureMPChequeJRBActionPerformed

    private void sauvegardeFactureJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegardeFactureJBActionPerformed
        facture.setLignes(modelLigne.getLignes());
        facture.setImmatriculation(immatriculationJtf.getText());

        if (facture.getClient() == null) {
            displayError("Le client n'a pas était saisi!");

        } else {
            if (facture.getImmatriculation().equals("")) {
                displayError("L'immatrculation n'a pas était saisi!");
            } else {

                if (facture.getLignes().isEmpty()) {
                    displayError("Les pieces à facturées non pas etait saisies!");
                } else {
                    int i = 0;
                    int s = facture.getLignes().size();

                    while (i < s && facture.getLignes().get(i).getQuantite() > 0) {
                        i++;
                    }

                    if (i != s) {
                        Piece p = facture.getLignes().get(i).getPiece();
                        String erreur = "La quantité commandée pour la pièce " + p.getDesignation() + "\n N°: " + p.getId_piece() + "\n reference " + p.getReference()
                                + "\n Marque: " + p.getMarque() + "\n n'a pas été saisie";
                        this.displayError(erreur);

                    } else {

                        fs.addFactureProfessionnel(facture);
                        for (Ligne l : facture.getLignes()) {
                            l.setFacture(facture);
                            fs.deduireStock(l.getPiece(), l.getQuantite());
                        }
                        this.notifierObservateurs();
                        ffs.createFileFacture(facture);
                        this.dispose();

                    }

                }
            }
        }

    }//GEN-LAST:event_sauvegardeFactureJBActionPerformed

    private void impressionFactureJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impressionFactureJBActionPerformed
        ffs.createFileFacture(facture);
    }//GEN-LAST:event_impressionFactureJBActionPerformed

    private void filtrePieceJTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtrePieceJTFKeyReleased
        int Ref = 1, Marque = 2, Designation = 3;
        int[] coloumns = {Ref, Marque, Designation};

        RowFilter rowFilter = null;

        if (!this.filtrePieceJTF.getText().equals("")) {
            String designation = this.filtrePieceJTF.getText().toUpperCase(Locale.FRANCE);

            rowFilter = RowFilter.regexFilter(
                    Pattern.compile(designation,
                            Pattern.CASE_INSENSITIVE).toString(), coloumns);

        }
        this.sorterStock.setRowFilter(rowFilter);
    }//GEN-LAST:event_filtrePieceJTFKeyReleased

    public void selectPiece() {
        int[] selection = this.stockJTable.getSelectedRows();
        int[] modelIndexes = new int[selection.length];

        for (int i = 0; i < selection.length; i++) {
            modelIndexes[i] = this.stockJTable.getRowSorter().convertRowIndexToModel(selection[i]);
        }

        Piece p = new Piece();
        Arrays.sort(modelIndexes);

        for (int i = 0; i < modelIndexes.length; i++) {
            p.setId_piece((Long) modelPiece.getValueAt(modelIndexes[i], 0));
            p.setReference((String) modelPiece.getValueAt(modelIndexes[i], 1));
            p.setMarque((String) modelPiece.getValueAt(modelIndexes[i], 2));
            p.setDesignation((String) modelPiece.getValueAt(modelIndexes[i], 3));
            p.setPrixAchat((Double) modelPiece.getValueAt(modelIndexes[i], 4));
            p.setPrixVente((Double) modelPiece.getValueAt(modelIndexes[i], 5));
            p.setQuantite((Integer) modelPiece.getValueAt(modelIndexes[i], 6));

            //verifier que la quantite n'est pas a 0 avant de selectionner la piece
            // afficher un merssage d'erreur sion
            this.modelLigne.addLigne(p);
            p = new Piece();

        }

        for (int i = modelIndexes.length - 1; i > -1; i--) {
            this.modelPiece.removePiece(modelIndexes[i]);
        }

        if (modelLigne.getLignes().isEmpty()) {
            sauvegardeFactureJB.setEnabled(false);
            impressionFactureJB.setEnabled(false);
        } else {
            sauvegardeFactureJB.setEnabled(true);
            impressionFactureJB.setEnabled(true);
        }
    }

    public void unSelectPiece() {
        int[] rows = this.lignesFactureJTable.getSelectedRows();

        Piece p = new Piece();
        for (int i = 0; i < rows.length; i++) {

            //probleme de concurence si 
            // le deuxieme utilisateur creer une ligne il vas modifier les quantite qui ne serons pas lu par
            //l'utilisateur courent
            //Solution fair une requette pour le creation de la ligne en bd /!\ retirer la ligne de la bd si 
            // l'utilisatuer veux just imprimer
            p = this.fs.consulterPiece((Long) modelLigne.getValueAt(rows[i], 0));

            if (p.getQuantite() == 0) {
                this.displayError("toutes les pieces " + p.getDesignation() + "viennent d'etre vendus");
            } else {
                this.modelPiece.addPiece(p);
            }

            p = new Piece();
        }

        for (int i = rows.length - 1; i > -1; i--) {
            modelLigne.removeLigne(rows[i]);

        }

        if (modelLigne.getLignes().isEmpty()) {
            sauvegardeFactureJB.setEnabled(false);
            impressionFactureJB.setEnabled(false);
        } else {
            sauvegardeFactureJB.setEnabled(true);
            impressionFactureJB.setEnabled(true);
        }

    }

    protected void changeCard(JPanel container, String cardName) {
        CardLayout cl = (CardLayout) container.getLayout();
        cl.show(container, cardName);
    }

    private void displayError(String validate) {
        JOptionPane.showMessageDialog(this.rootPane, validate, "Facture", JOptionPane.ERROR_MESSAGE);
    }

    private void displaySuccess() {
        JOptionPane.showMessageDialog(this.rootPane, "Modification enregistrée", "Facture", JOptionPane.INFORMATION_MESSAGE);
    }

    protected void creerFacture(Long numero_facture,
            Client c,
            Date facturation,
            Date livraison,
            String modePayement,
            ArrayList<Ligne> lignes,
            String immat) {
        Facture f = new Facture();
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy");
        //f.setMode_payement(this.getModePayement());

        String date_facturation = dateFormatter.format(facturation);
        String date_Livraison = dateFormatter.format(livraison);

        f.setClient(c);
        f.setDate_facturation(date_facturation);
        f.setDate_livraison(date_Livraison);
        f.setMode_payement(modePayement);
//            f.setNumero_facture(numero_facture);
        f.setImmatriculation(immat);
        fs.addFacture(f);

        for (Ligne ligne : lignes) {
            fs.addLigne(ligne, f.getId_facture());
            fs.deduireStock(ligne.getPiece(), ligne.getQuantite());
        }
    }

    protected void changerQuantitePrixLigne() {

        /* lignes=modelLigne.getLignes();
        FormulaireLigne fl ;
        int selectedRow = this.lignesFactureJTable.getSelectedRow();
        Integer quantite = 0 ;
        Double prix = 0.0;
 
        if(selectedRow > -1)
            {   
                Piece p = lignes.get(selectedRow).getPiece();
                
                
                fl = new FormulaireLigne(this.prixUHTJTF.getText(),quantiteJTF.getText(), p);
                 if(fl.validate().isEmpty())
                 {   quantite = Integer.parseInt(quantiteJTF.getText());
                     prix = Double.parseDouble(prixUHTJTF.getText());
                     if(quantite <=p.getQuantite())
                     {
                         modelLigne.updateLigne(selectedRow, p, quantite, prix);
                         facture.setLignes(modelLigne.getLignes());
                         displaySuccess();
                         changeCard(this.selecteurPieceCardJP,"selectedLigneCard");
                     }
                     else
                     {
                        
                        displayError("Quantite en stock insufisante");
                     
                     }
                 }
                 else
                 {   
                     
                     displayError(fl.validate());
                 }
            }
                
            
         */
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPieceFactureJB;
    private javax.swing.JPanel conteneurProfessionnelJP;
    private javax.swing.JLabel cpJL;
    private javax.swing.JLabel cpTitreJL;
    private com.toedter.calendar.JDateChooser dateLivraisonJDateChooser;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JRadioButton factureMPChequeJRB;
    private javax.swing.JRadioButton factureMPEspeceJRB;
    private javax.swing.JPanel factureMPJPanel;
    private javax.swing.JRadioButton factureMPVirementJRB;
    private javax.swing.JPanel facturerPorfessionnelJP;
    private javax.swing.JTextField filtrePieceJTF;
    private javax.swing.JTextField immatriculationJtf;
    private javax.swing.JButton impressionFactureJB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lieuJL;
    private javax.swing.JLabel lieuTitreJL;
    private javax.swing.JScrollPane lignesFactureJSP;
    private javax.swing.JTable lignesFactureJTable;
    private javax.swing.ButtonGroup modePayementBG;
    private javax.swing.JPanel modificationProfessionnelFactureCardJP;
    private javax.swing.JLabel nomSocieteFactureJL;
    private javax.swing.JTextField nomSocieteFactureJTF;
    private javax.swing.JLabel nomSocieteJL;
    private javax.swing.JLabel nomSocieteTitreJL;
    private java.util.List pieceList;
    private javax.persistence.Query pieceQuery;
    private javax.swing.JScrollPane professionnelFactureJSP;
    private javax.swing.JTable professionnelFactureJTable;
    private java.util.List<facturation.entities.Client> professionnelList;
    private javax.persistence.Query professionnelQuery;
    private javax.swing.JLabel recherchePiceJL;
    private javax.swing.JButton removePieceFactureJB;
    private javax.swing.JButton sauvegardeFactureJB;
    private javax.swing.JPanel selectProfessionnelFactureCardJP;
    private javax.swing.JPanel selecteurPieceJP;
    private javax.swing.JPanel selecteurProfessionnelJP;
    private javax.swing.JButton selectionnerProfessionnelJB;
    private javax.swing.JScrollPane stockJSP;
    private javax.swing.JTable stockJTable;
    private javax.swing.JLabel villeJL;
    private javax.swing.JLabel villeTiteJL;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void ajouterObservateur(Observateur o) {

        this.observateurs.add(o);
    }

    @Override
    public void supprimerObservateur(Observateur o) {
        this.observateurs.remove(o);
    }

    @Override
    public void notifierObservateurs() {
        for (Observateur o : this.observateurs) {
            o.update();
        }
    }
}
